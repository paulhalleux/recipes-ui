/* tslint:disable */
/* eslint-disable */
/**
 * Recipes.Api, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateIngredientRequest,
  IngredientResponse,
  IngredientResponsePaginated,
  UpdateIngredientRequest,
} from '../models/index';
import {
    CreateIngredientRequestFromJSON,
    CreateIngredientRequestToJSON,
    IngredientResponseFromJSON,
    IngredientResponseToJSON,
    IngredientResponsePaginatedFromJSON,
    IngredientResponsePaginatedToJSON,
    UpdateIngredientRequestFromJSON,
    UpdateIngredientRequestToJSON,
} from '../models/index';

export interface CreateIngredientOperationRequest {
    createIngredientRequest: CreateIngredientRequest;
}

export interface DeleteIngredientRequest {
    id: string;
}

export interface GetAllIngredientsRequest {
    page?: number;
    size?: number;
}

export interface GetIngredientByIdRequest {
    id: string;
}

export interface RestoreIngredientRequest {
    id: string;
}

export interface UpdateIngredientOperationRequest {
    id: string;
    updateIngredientRequest: UpdateIngredientRequest;
}

export interface UploadIngredientImageRequest {
    id: string;
    file: Blob;
}

/**
 * 
 */
export class IngredientsApi extends runtime.BaseAPI {

    /**
     * Create a new ingredient
     */
    async createIngredientRaw(requestParameters: CreateIngredientOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IngredientResponse>> {
        if (requestParameters['createIngredientRequest'] == null) {
            throw new runtime.RequiredError(
                'createIngredientRequest',
                'Required parameter "createIngredientRequest" was null or undefined when calling createIngredient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ingredients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateIngredientRequestToJSON(requestParameters['createIngredientRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IngredientResponseFromJSON(jsonValue));
    }

    /**
     * Create a new ingredient
     */
    async createIngredient(requestParameters: CreateIngredientOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IngredientResponse> {
        const response = await this.createIngredientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete an ingredient by id
     */
    async deleteIngredientRaw(requestParameters: DeleteIngredientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteIngredient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ingredients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an ingredient by id
     */
    async deleteIngredient(requestParameters: DeleteIngredientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteIngredientRaw(requestParameters, initOverrides);
    }

    /**
     * Get all ingredients paginated
     */
    async getAllIngredientsRaw(requestParameters: GetAllIngredientsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IngredientResponsePaginated>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ingredients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IngredientResponsePaginatedFromJSON(jsonValue));
    }

    /**
     * Get all ingredients paginated
     */
    async getAllIngredients(requestParameters: GetAllIngredientsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IngredientResponsePaginated> {
        const response = await this.getAllIngredientsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get an ingredient by id
     */
    async getIngredientByIdRaw(requestParameters: GetIngredientByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IngredientResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getIngredientById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ingredients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IngredientResponseFromJSON(jsonValue));
    }

    /**
     * Get an ingredient by id
     */
    async getIngredientById(requestParameters: GetIngredientByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IngredientResponse> {
        const response = await this.getIngredientByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Restore an ingredient by id
     */
    async restoreIngredientRaw(requestParameters: RestoreIngredientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IngredientResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling restoreIngredient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/ingredients/{id}/restore`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IngredientResponseFromJSON(jsonValue));
    }

    /**
     * Restore an ingredient by id
     */
    async restoreIngredient(requestParameters: RestoreIngredientRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IngredientResponse> {
        const response = await this.restoreIngredientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an ingredient
     */
    async updateIngredientRaw(requestParameters: UpdateIngredientOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IngredientResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling updateIngredient().'
            );
        }

        if (requestParameters['updateIngredientRequest'] == null) {
            throw new runtime.RequiredError(
                'updateIngredientRequest',
                'Required parameter "updateIngredientRequest" was null or undefined when calling updateIngredient().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/ingredients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateIngredientRequestToJSON(requestParameters['updateIngredientRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IngredientResponseFromJSON(jsonValue));
    }

    /**
     * Update an ingredient
     */
    async updateIngredient(requestParameters: UpdateIngredientOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IngredientResponse> {
        const response = await this.updateIngredientRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Uploads an image for an ingredient.
     */
    async uploadIngredientImageRaw(requestParameters: UploadIngredientImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling uploadIngredientImage().'
            );
        }

        if (requestParameters['file'] == null) {
            throw new runtime.RequiredError(
                'file',
                'Required parameter "file" was null or undefined when calling uploadIngredientImage().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request({
            path: `/ingredients/{id}/image`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Uploads an image for an ingredient.
     */
    async uploadIngredientImage(requestParameters: UploadIngredientImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.uploadIngredientImageRaw(requestParameters, initOverrides);
    }

}
